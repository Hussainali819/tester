#include "excel2000.h"
#include <cviauto.h>
#include "excelreport.h"
#include <ansi_c.h>
#include <rs232.h>
#include <utility.h>
#include <cvirte.h>		
#include <userint.h>
#include "FUELNOZZLETESTER.h"
#define fc21ComPort 3 
#define omegaDAQComPort 3
#define DAQPORT 3
#define stepperMotorComPort 14
#define OPEN 1
#define CLOSE 0
#define OFF 2
#define PRESSUREGAUGE '1'
#define DRIBBLE '2'
#define PRESSUREREGULATOR '3'

#define DEADBANDVALVE1POS  10
#define DEADBANDVALVE1NEG -10

#define DEADBANDVALVE2POS 10
#define DEADBANDVALVE2NEG -10

#define DEADBANDVALVE3POS 2
#define DEADBANDVALVE3NEG -2

#define LOWERLIMITVALVE 5
#define UPPERLIMITVALVE 99

double pressureIn[14]= {769,925,1075,1184,1288,1396,1808,2022,2116,2330,3530,3630,3830,3030};
double pressureOut[14]={0,30,60,80,100,120,200,240,260,300,340,360,400,440};

double valve1In[2]={0,3096};					  
double valve1Out[2]={0,100};

double dribbleValveIn[2]={150,1000};
double dribbleValveOut[2]={0,100};

double pressureValveIn[2]={30,2900};//3200
double pressureValveOut[2]={0,100};

static ExcelObj_App               ExcelAppHandle = 0;  
static ExcelObj_App				  calXlapplicationHandle=0;
static ExcelObj_Workbooks         ExcelWorkbooksHandle = 0; 
static ExcelObj_Workbooks         calXlworkbooksHandle = 0;
static ExcelObj_Workbook          ExcelWorkbookHandle = 0; 
static ExcelObj_Workbook		  calXlworkbookHandle=0;
static ExcelObj_Sheets            ExcelSheetsHandle = 0;  
static ExcelObj_Sheets            calXlSheetsHandle = 0;
static ExcelObj_Worksheet         ExcelWorksheetHandle = 0;
static ExcelObj_Worksheet		  calXlworksheetHandle=0;
static ExcelObj_Range             ExcelRangeHandle = 0;     
static ExcelObj_ChartObject       ExcelChartObjHandle = 0;
static ExcelObj_Chart             ExcelChartHandle = 0;
static ExcelObj_ChartGroup        ExcelChartsHandle = 0;


static int appVisible = 1; 
int dribbleCounter = 0;
static int panelHandle;
double pressure;
double valve1,dribbleValve,pressureValve;
double flow;
double corFlow;
double temperature;
double valve1CurrentPosition,dribbleValveCurrentPosition,pressureValveCurrentPosition;
int valueChangeFlag=1;
int tableRow=1;
int toggleButton2Val;


void LoadSequencerTable()
{
	HRESULT error=0;
	calXlworkbooksHandle=0;
	VARIANT password;
	VARIANT wr,rcell;
	int row=1;
	int col=1;
	int readcell=1;
	char tempRead[1000];
	char cellAddress[10];
		
	CA_VariantSetCString(&password, "pakistan");
			
	Excel_NewApp (NULL, 1, LOCALE_NEUTRAL, 0, &calXlapplicationHandle); 
	Excel_SetProperty (calXlapplicationHandle, NULL, Excel_AppVisible, CAVT_BOOL, VFALSE);

	Excel_GetProperty (calXlapplicationHandle, NULL, Excel_AppWorkbooks, CAVT_OBJHANDLE, &calXlworkbooksHandle);
	error = Excel_WorkbooksOpen (calXlworkbooksHandle, NULL, "e:\\t56 fuel nozzle.xlsx", CA_DEFAULT_VAL, CA_DEFAULT_VAL, CA_DEFAULT_VAL, CA_DEFAULT_VAL, CA_DEFAULT_VAL, CA_DEFAULT_VAL, CA_DEFAULT_VAL,
        CA_DEFAULT_VAL, CA_DEFAULT_VAL, CA_DEFAULT_VAL, CA_DEFAULT_VAL, CA_DEFAULT_VAL, &calXlworkbooksHandle);
	
	if(error > 0 || error == 0)
	{
  	// Get Active Workbook Sheets
    Excel_GetProperty (calXlapplicationHandle, NULL, Excel_AppSheets, 
    	CAVT_OBJHANDLE, &calXlSheetsHandle);
                
    
    // Get First Sheet
    Excel_SheetsItem (calXlSheetsHandle, NULL, CA_VariantInt(1), 
    	&calXlworksheetHandle);
                
    
   	// Make First Sheet Active - should already be active    
    Excel_WorksheetActivate (calXlworksheetHandle, NULL);
	
	sprintf (cellAddress, "A%d", row);
	ExcelRpt_GetCellValue (calXlworksheetHandle, cellAddress, ExRConst_dataString, tempRead);
	while(strcmp (tempRead, "")!=0) //while tempRead is not empty
	{
		row++;
		sprintf (cellAddress, "A%d", row);
		ExcelRpt_GetCellValue (calXlworksheetHandle, cellAddress, ExRConst_dataString, tempRead);
	}							
	sprintf (cellAddress, "A1:A%d", row-1);
	
//	ExcelRpt_GetWorksheetAttribute (calXlworksheetHandle, ER_WS_ATTR_USED_RANGE, rangeXL);

	ExcelRpt_ReadDataToTableControl (calXlworksheetHandle, cellAddress, MakePoint(1,1), ExRConst_OverwriteGrow, panelHandle, PANEL_TABLE);
	
	Excel_WorkbookClose (calXlworkbooksHandle, NULL, CA_DEFAULT_VAL, CA_DEFAULT_VAL, CA_DEFAULT_VAL);
	ExcelRpt_ApplicationQuit (calXlapplicationHandle);
	Excel_AppQuit (calXlapplicationHandle, NULL);
	}
	
}


double dataFormatter(double inMin,double inMax,double outMin, double outMax,double value)
{

	if(inMax > inMin)
	{	
		if(value > inMax)
			value = inMax;
		else if(value < inMin)
			value = inMin;
	}
	else 
	{
		if(value < inMax)
			value = inMax;
		else if(value > inMin)
			value = inMin;
	}
	return (((outMax-outMin)/(inMax-inMin))*(value-inMin)+outMin);
}
double calibrateValue(double inValue,double inTable[],double outTable[],int numValues)
{
	int i;
	if(inValue > inTable[numValues-1])
		inValue = (inTable[numValues-1]-1);
	else if(inValue < inTable[0])
		inValue = (inTable[0]+1);
	
	for(i=0;i<numValues-1;i++)
		if(inValue > inTable[i] && inValue < inTable[i+1])
			return dataFormatter(inTable[i],inTable[i+1],outTable[i],outTable[i+1],inValue);
		
	return 0;
}
double getOmegaDAQValue(char channel)
{
	char commandString[6] = {'$','1','R','D',0x0d};
	char value[200],val[12];
	int j=0;
	int result=1,i=0,polarity;
	double valueReturn=0.0;
	commandString[1] = channel;
	ComWrt(omegaDAQComPort,commandString,5);
//	while (result != '*' && result > 0)
		result = ComRdByte(omegaDAQComPort);
	if(result >0)
	{
		result = 1;
	//	while(result != 0x0d)	
		{
			result = ComRdByte(omegaDAQComPort);
			if(result < 0)
				return -1;
			value[j++] = result;
		}
	
		
		value[j] = '\0';
		valueReturn = atof(value);
	}
	
	return valueReturn;
}	

double getFC21Value(char offset)
{
	char commandString[10]={0x64,0x30,0x31,0x76,0x30,0x30,0x2c,0x30,0x33,0x0d};         
	char value[200],val[12];
	int j=0;
	int result=1,i=0,valRecvd=0;
	double valueReturn=0.0;
			
	commandString[8] = offset;
	//ComWrt(fc21ComPort,commandString,10);
	while(result != 0x0d && result > 0)
		result = ComRdByte(fc21ComPort);
		
	
	if(result > 0)
	{
		result = 1;
		while(result != 0x0d)
		{
			result = ComRdByte(fc21ComPort);
					value[j++] = result;
		}
		value[j] = '\0';
		
	valueReturn = atof(value);
	}
		

	
	return valueReturn;
}
int CVICALLBACK getFC21Values (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{
	switch (event)
	{
		case EVENT_TIMER_TICK:
			
	    //corFlow = getFC21Value(50);			
		flow = getFC21Value(49);
		temperature = getFC21Value(52);
		SetCtrlVal(panelHandle,PANEL_NUMERIC,flow);
		PlotStripChartPoint(panelHandle,PANEL_STRIPCHART,flow);
		SetCtrlVal(panelHandle,PANEL_NUMERICTANK,flow);
		
		SetCtrlVal(panelHandle,PANEL_NUMERIC_3,temperature);
		PlotStripChartPoint(panelHandle,PANEL_STRIPCHART_3,temperature);
		SetCtrlVal(panelHandle,PANEL_NUMERICTHERM,temperature);
		
		
		break;
	}
	return 0;
}


int CVICALLBACK getDAQValues (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{  
	int channel[8],i;
	double value;
	switch (event)
	{
		case EVENT_TIMER_TICK:
	
		//while(ComRdByte(DAQPORT) != 'S');
		if(ComRdByte(DAQPORT) == '#')
		{
			for(i=0;i<8;i++)
				channel[i] = ComRdByte(DAQPORT) + ComRdByte(DAQPORT)*256;
		
			pressure = calibrateValue(channel[3],pressureIn,pressureOut,14);
		
			//value = getOmegaDAQValue('1');
			//if(value > 0)
			//	pressure = dataFormatter(1550,5756,0,400,value);
		
			SetCtrlVal(panelHandle,PANEL_NUMERIC_2,pressure);
			PlotStripChartPoint(panelHandle,PANEL_STRIPCHART_2,pressure);
			SetCtrlVal(panelHandle,PANEL_NUMERICGAUGE,pressure);
		
		
		//	valve1 = calibrateValue(channel[1],valve1In,valve1Out,2);
	
			dribbleValve = calibrateValue(channel[2],dribbleValveIn,dribbleValveOut,2);
			pressureValve = calibrateValue(channel[1],pressureValveIn,pressureValveOut,2);
		
			valve1CurrentPosition = valve1;
		
			dribbleValveCurrentPosition = dribbleValve;
			SetCtrlVal(panelHandle,PANEL_NUMERICMETER_2,dribbleValve);
	
			pressureValveCurrentPosition = pressureValve;
			SetCtrlVal(panelHandle,PANEL_NUMERICMETER_3,pressureValve);
			FlushInQ(DAQPORT);   
			//value = getOmegaDAQValue('2');  //Maximum Value 2183
			//printf("%\n",valve1);
		//	if(value > 0)
		//	{
		//			valve1 = dataFormatter(0,2180,0,100,value);
				
		//	}
		//	SetCtrlVal(panelHandle,PANEL_NUMERICMETER,valve1);
		
	
				
			//value = getOmegaDAQValue('3');
			//printf("%f\n",dribbleValve);
		//if(value > 0)
		//	{
		//		dribbleValve = dataFormatter(145,1200,0,100,value);
		
		//	}
		
		//	value = getOmegaDAQValue('4');
		//	printf("%f\n",pressureValve);   
		//	if(value)
		//	{
		//		pressureValve = dataFormatter(10,3905,0,100,value);
		
		//	}
		}
		
		

			break;
	}
	return 0;
}

/*int CVICALLBACK driveStepperMotorPressure (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{   int position;    
	switch (event)
	{
		case EVENT_COMMIT:

			  GetCtrlVal(panelHandle,PANEL_NUMERICKNOB,&position);
			if(position>1)
			{
				ComWrtByte(stepperMotorComPort,'S');
				ComWrtByte(stepperMotorComPort,'#');
				ComWrtByte(stepperMotorComPort,'2');
				ComWrtByte(stepperMotorComPort,1);
			}
			else if(position==0)
			{
				ComWrtByte(stepperMotorComPort,'S');
				ComWrtByte(stepperMotorComPort,'#');
				ComWrtByte(stepperMotorComPort,'2');
				ComWrtByte(stepperMotorComPort,2);	
			}
			
			
			break;
	}
	return 0;
}

 */
int CVICALLBACK testPulse (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{   int position;
	switch (event)
	{
		case EVENT_TIMER_TICK:
			
			break;
	}
	return 0;
}

int CVICALLBACK OperateMotor2 (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{   int position;
	switch (event)
	{
		case EVENT_COMMIT:
			GetCtrlVal(panelHandle,PANEL_BINARYSWITCH_2,&position);
			if(position)
			{
				ComWrtByte(stepperMotorComPort,'S');
				ComWrtByte(stepperMotorComPort,'#');
				ComWrtByte(stepperMotorComPort,'3');
				ComWrtByte(stepperMotorComPort,1);
			}
			else
			{
				ComWrtByte(stepperMotorComPort,'S');
				ComWrtByte(stepperMotorComPort,'#');
				ComWrtByte(stepperMotorComPort,'3');
				ComWrtByte(stepperMotorComPort,2);	
			}
			
			break;
			break;
	}
	return 0;
}
void driveMotor(char valve,int state)
{
	//ComWrtByte(stepperMotorComPort,'S');
	//ComWrtByte(stepperMotorComPort,'#');
	//ComWrtByte(stepperMotorComPort,valve);
	//ComWrtByte(stepperMotorComPort,state);	
}

int CVICALLBACK Valve1ControlTimer (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{
	int valve1RequiredPosition,dribbleValveRequiredPosition,pressureValveRequiredPosition;
	switch (event)
	{
		case EVENT_TIMER_TICK:

		/*	GetCtrlVal(panelHandle,PANEL_BINARYSWITCH,&valve1RequiredPosition);
			if(valve1RequiredPosition)
				valve1RequiredPosition = 100;
			else
				valve1RequiredPosition = 0;
			
			if(valve1RequiredPosition - valve1CurrentPosition > DEADBANDVALVE1POS)
				driveMotor(PRESSUREGAUGE,OPEN);
			else if(valve1RequiredPosition - valve1CurrentPosition < DEADBANDVALVE1NEG)
				driveMotor(PRESSUREGAUGE,CLOSE);
			else
				driveMotor(PRESSUREGAUGE,OFF);
		*/	
			
			GetCtrlVal(panelHandle,PANEL_BINARYSWITCH_2,&dribbleValveRequiredPosition);
			if(dribbleValveRequiredPosition)
				dribbleValveRequiredPosition = 40;
			else
				dribbleValveRequiredPosition = 0;
			
			if(dribbleValveRequiredPosition - dribbleValveCurrentPosition > DEADBANDVALVE2POS)
				driveMotor(DRIBBLE,OPEN);
			else if(dribbleValveRequiredPosition - dribbleValveCurrentPosition < DEADBANDVALVE2NEG)
				driveMotor(DRIBBLE,CLOSE);
			else
				driveMotor(DRIBBLE,OFF);
			
			
			if(valueChangeFlag)
			{
				GetCtrlVal(panelHandle,PANEL_NUMERICSLIDE,&pressureValveRequiredPosition);
				if(pressureValveRequiredPosition > 425)
				{   
					pressureValveRequiredPosition = 425;
					SetCtrlVal(panelHandle,PANEL_NUMERICSLIDE,pressureValveRequiredPosition);
				}
				
				else if(pressureValveRequiredPosition < 30)
				{
					pressureValveRequiredPosition = 30;
					SetCtrlVal(panelHandle,PANEL_NUMERICSLIDE,pressureValveRequiredPosition);
				}
				pressureValveRequiredPosition = dataFormatter(425,30,0,100,pressureValveRequiredPosition);
				if(pressureValveRequiredPosition - pressureValveCurrentPosition > DEADBANDVALVE3POS)
					driveMotor(PRESSUREREGULATOR,OPEN);
				else if(pressureValveRequiredPosition - pressureValveCurrentPosition < DEADBANDVALVE3NEG)
					driveMotor(PRESSUREREGULATOR,CLOSE);
				else
				{
					driveMotor(PRESSUREREGULATOR,OFF);
					valueChangeFlag = 0;
				}
			}
			
			
			break;
	}
	return 0;
}

int CVICALLBACK openPressure (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{
	switch (event)
	{
		case EVENT_COMMIT:
			
			if(pressureValve >LOWERLIMITVALVE)
			{
				driveMotor(PRESSUREREGULATOR,CLOSE);
				Delay(0.05);
				driveMotor(PRESSUREREGULATOR,OFF);
			}
			break;
	}
	return 0;
}

int CVICALLBACK closePressure (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{
	switch (event)
	{
		case EVENT_COMMIT:
			if(pressureValve < UPPERLIMITVALVE)
			{
				driveMotor(PRESSUREREGULATOR,OPEN);
				Delay(0.05);
				driveMotor(PRESSUREREGULATOR,OFF);
			}
			break;
	}
	return 0;
}

int CVICALLBACK openPressureC (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{
	switch (event)
	{
		case EVENT_COMMIT:
			
			if(pressureValve > LOWERLIMITVALVE)
			{
				driveMotor(PRESSUREREGULATOR,CLOSE);
				Delay(0.2);
				driveMotor(PRESSUREREGULATOR,OFF);
			}
			break;
	}
	return 0;
}

int CVICALLBACK closePressureC (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{
	switch (event)
	{
		case EVENT_COMMIT:
			if(pressureValve < UPPERLIMITVALVE)
			{
				driveMotor(PRESSUREREGULATOR,OPEN);
				Delay(0.2);
			
				driveMotor(PRESSUREREGULATOR,OFF);
			}
			break;
	}
	return 0;
}

int CVICALLBACK chANGEVAL (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{
	switch (event)
	{
		case EVENT_COMMIT:
			valueChangeFlag=1 ;
			break;
	}
	return 0;
}

void TableHighLiteControl()
{   
//	SetActiveTableCell (sequencerPanelHandle,SEQPANEL_TABLE, MakePoint(1,tableRow));
	SetTableSelection(panelHandle,PANEL_TABLE,MakeRect(tableRow,1,1,4));
}

int CVICALLBACK TOGGLEBUTTON_2 (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{
	switch (event)
	{
		case EVENT_VAL_CHANGED:
			GetCtrlVal(panelHandle,PANEL_TOGGLEBUTTON_2,&toggleButton2Val);
			
			if(toggleButton2Val==1)
			{
				SetCtrlAttribute(panelHandle,PANEL_BackButtonSeqPanel,ATTR_DIMMED,0);
				SetCtrlAttribute(panelHandle,PANEL_NextButtonSeqPanel,ATTR_DIMMED,0);
				tableRow=1;
				TableHighLiteControl();
			}
			else
			{
				SetCtrlAttribute(panelHandle,PANEL_BackButtonSeqPanel,ATTR_DIMMED,1);
				SetCtrlAttribute(panelHandle,PANEL_NextButtonSeqPanel,ATTR_DIMMED,1);
				tableRow=1;
			}

			break;
	}
	return 0;
}

int CVICALLBACK BackButtonSeqPanel (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{
	switch (event)
	{
		case EVENT_COMMIT:
			tableRow--;
			TableHighLiteControl();
			break;
	}
	return 0;
}

int CVICALLBACK NextButtonSeqPanel (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{
	switch (event)
	{
		case EVENT_COMMIT:
			tableRow++;
			TableHighLiteControl();

			break;
	}
	return 0;
}

int CVICALLBACK dribble (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{
	switch (event)
	{
		case EVENT_COMMIT:

			SetCtrlVal(panelHandle,PANEL_NUMERICSLIDE,390);
			valueChangeFlag = 1; 
			
			SetCtrlAttribute(panelHandle,PANEL_TIMER_5,ATTR_ENABLED,1);
			
			break;
	}
	return 0;
}

int CVICALLBACK timerDribble (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{
	int val;
	switch (event)
	{
		case EVENT_TIMER_TICK:

			if(dribbleCounter < 6)
			{
			//	if(pressure > 300)
				 {
				 	GetCtrlVal(panelHandle,PANEL_BINARYSWITCH_2,&val);
					SetCtrlVal(panelHandle,PANEL_BINARYSWITCH_2,!val);
					dribbleCounter++;
			 
				 }
			}
			else
			{
				dribbleCounter = 0;
				SetCtrlAttribute(panelHandle,PANEL_TIMER_5,ATTR_ENABLED,0);
			}
			
			break;
	}
	return 0;
}

int CVICALLBACK quitProgram (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{
	switch (event)
	{
		case EVENT_COMMIT:
			 QuitUserInterface(0);
			break;
	}
	return 0;
}











int main (int argc, char *argv[])
{
	if (InitCVIRTE (0, argv, 0) == 0)
		return -1;	/* out of memory */
	if ((panelHandle = LoadPanel (0, "FUELNOZZLETESTER.uir", PANEL)) < 0)
		return -1;
	//OpenComConfig(fc21ComPort,"COM8",9600,0,8,1,512,512);
	//OpenComConfig(omegaDAQComPort,"COM3",115200,0,8,1,512,512);
	//OpenComConfig(stepperMotorComPort,"COM14",115200,0,8,1,512,512);
	
	//DisableBreakOnLibraryErrors();
	//SetComTime(fc21ComPort,0.3);
	//SetComTime(omegaDAQComPort,0.3);
	
	
	DisplayPanel (panelHandle);
	LoadSequencerTable();
	RunUserInterface ();
	DiscardPanel (panelHandle);
	return 0;
}
